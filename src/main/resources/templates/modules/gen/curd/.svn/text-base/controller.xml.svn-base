<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>controller</name>
	<filePath>src/main/java/${packageName}/${moduleName}/web/${subModuleName}</filePath>
	<fileName>${ClassName}Controller.java</fileName>
	<content><![CDATA[
/**
 * Copyright &copy; 2014-2016 <a href="https://pactera.com">Pactera-JeeSite</a> All rights reserved.
 */
package ${packageName}.${moduleName}.web<#if subModuleName != "">.${subModuleName}</#if>;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.thinkgem.jeesite.common.config.Global;
import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.web.BaseController;
import com.thinkgem.jeesite.common.utils.StringUtils;
import com.thinkgem.jeesite.modules.sys.utils.MutiLangUtils;
import ${packageName}.${moduleName}.entity<#if subModuleName != "">.${subModuleName}</#if>.${ClassName};
import ${packageName}.${moduleName}.service<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Service;

	<#-- csv导入导出 -->
 	<#if ioArtifact?? && ioArtifact == "orangesignal-csv">
import javax.validation.ConstraintViolationException;
import org.springframework.web.multipart.MultipartFile;
import com.orangesignal.csv.CsvConfig;
import com.orangesignal.csv.manager.CsvEntityManager;
import com.orangesignal.csv.manager.CsvSaver;
import com.thinkgem.jeesite.common.beanvalidator.BeanValidators;
import com.thinkgem.jeesite.common.utils.DateUtils;
import com.thinkgem.jeesite.common.utils.Encodes;
	</#if>
	<#-- excel导入导出 -->
 	<#if ioArtifact?? && ioArtifact == "poi">
import javax.validation.ConstraintViolationException;
import org.springframework.web.multipart.MultipartFile;

import com.thinkgem.jeesite.common.beanvalidator.BeanValidators;
import com.thinkgem.jeesite.common.utils.DateUtils;
import com.thinkgem.jeesite.common.utils.Encodes;
import com.thinkgem.jeesite.common.utils.excel.ExportExcel;
import com.thinkgem.jeesite.common.utils.excel.ImportExcel;
	</#if>
/**
 * ${functionName}Controller
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@Controller
@RequestMapping(value = "${r"${adminPath}"}/${urlPrefix}")
public class ${ClassName}Controller extends BaseController {

	<#-- 定义跳转地址静态常量 -->
	public static final String URL_ADMIN_REPAGE = "redirect:"+Global.getAdminPath()+"/${viewPrefix}/?repage";
	public static final String URL_MODULE_LIST = "${lastPackageName}/${viewPrefix}List";
	public static final String URL_MODULE_FORM = "${lastPackageName}/${viewPrefix}Form";
	
	public static final String PERMISSION_VIEW = "${permissionPrefix}:view";
	public static final String PERMISSION_EDIT = "${permissionPrefix}:edit";
	public static final String PERMISSION_DBA = "${permissionPrefix}:dba";
	public static final String PERMISSION_IO = "${permissionPrefix}:io";
	
	@Autowired
	private ${ClassName}Service ${className}Service;
	
	@ModelAttribute
	public ${ClassName} get(@RequestParam(required=false) String id) {
		${ClassName} entity = null;
		if (StringUtils.isNotBlank(id)){
			entity = ${className}Service.get(id);
		}
		if (entity == null){
			entity = new ${ClassName}();
		}
		return entity;
	}
	
		<#-- 自动填充列表后台异步方法 -->
		<#list table.columnList as c>
			<#if c.isQuery?? && c.isQuery == "1" && c.showType == "autocomplete">
	/**
	 * 异步取得[${c.comments}]列表
	 * @param query
	 * @return
	 */
	@RequestMapping(value = "get${c.simpleJavaField?cap_first}List", method = RequestMethod.GET)
	public @ResponseBody List<${ClassName}> get${c.simpleJavaField?cap_first}List(@RequestParam("term") String query) {
		${ClassName} ${className} = new ${ClassName}();
		${className}.set${c.simpleJavaField?cap_first}(query);
		${className}.getPage().setPageSize(Integer.valueOf(Global.getConfig("autocomplete.menuSize")));
		List<${ClassName}> ${c.javaFieldId}List= ${className}Service.findList(${className});
		return ${c.javaFieldId}List;
	}
    		</#if>
		</#list>
	
	@RequiresPermissions(PERMISSION_VIEW)
	@RequestMapping(value = {"list", ""})
	public String list(${ClassName} ${className}, HttpServletRequest request, HttpServletResponse response, Model model) {
		Page<${ClassName}> page = ${className}Service.findPage(new Page<${ClassName}>(request, response), ${className}); 
		model.addAttribute("page", page);
		return URL_MODULE_LIST;
	}

	@RequiresPermissions(PERMISSION_VIEW)
	@RequestMapping(value = "form")
	public String form(${ClassName} ${className}, Model model) {
		model.addAttribute("${className}", ${className});
		return URL_MODULE_FORM;
	}

	@RequiresPermissions(PERMISSION_EDIT)
	@RequestMapping(value = "save")
	public String save(${ClassName} ${className}, Model model, RedirectAttributes redirectAttributes) {
		if (!beanValidator(model, ${className})){
			return form(${className}, model);
		}
		${className}Service.save(${className});
		addMessage(redirectAttributes, MutiLangUtils.getLang("common.save.success.param", "【${functionNameSimple}】"));
		return URL_ADMIN_REPAGE;
	}
	
	@RequiresPermissions(PERMISSION_EDIT)
	@RequestMapping(value = "delete")
	public String delete(${ClassName} ${className}, RedirectAttributes redirectAttributes) {
		${className}Service.delete(${className});
		String physicalDelete = ${className}.getPhysicalDelete().booleanValue()?" <span class='text-warning'>[注：物理删除]</span>":"";
		addMessage(redirectAttributes, MutiLangUtils.getLang("common.delete.success.param", "【${functionNameSimple}】") + physicalDelete);
		return URL_ADMIN_REPAGE;
	}
	
		<#if showRowCheckBox??>
	@RequiresPermissions(PERMISSION_EDIT)
	@RequestMapping(value = "deleteChecked")
	public String deleteChecked(${ClassName} ${className}, RedirectAttributes redirectAttributes) {
		${className}Service.deleteList(${className});
		String physicalDelete = ${className}.getPhysicalDelete().booleanValue()?" <span class='text-warning'>[注：物理删除]</span>":"";
		addMessage(redirectAttributes, MutiLangUtils.getLang("common.delete.success.param", "【${functionNameSimple}】") + " （共批量删除 " + ${className}.getCbRowDataIds().size() + " 条数据）" + physicalDelete);
		return URL_ADMIN_REPAGE;
	}
		</#if>
	
		<#if showPhysicalDeleteFunction??>
	@RequiresPermissions(PERMISSION_DBA)
	@RequestMapping(value = "truncateTable")
	public String truncateTable(${ClassName} ${className}, RedirectAttributes redirectAttributes) {
		${className}Service.truncateTable(${className});
		addMessage(redirectAttributes, MutiLangUtils.getLang("common.delete.success.param", "【${functionNameSimple}，<span class='text-warning'>物理清空</span>】"));
		return URL_ADMIN_REPAGE;
	}
		</#if>
	
		<#if showRowCopyFunction??>
	@RequiresPermissions(PERMISSION_DBA)
	@RequestMapping(value = "copy")
	public String copy(${ClassName} ${className}, RedirectAttributes redirectAttributes) {
		${className}Service.copy(${className});
		addMessage(redirectAttributes, MutiLangUtils.getLang("common.copy.success.param", "【${functionNameSimple}】"));
		return URL_ADMIN_REPAGE;
	}
	
	@RequiresPermissions(PERMISSION_DBA)
	@RequestMapping(value = "copyChecked")
	public String copyChecked(${ClassName} ${className}, RedirectAttributes redirectAttributes) {
		${className}Service.copyList(${className});
		addMessage(redirectAttributes, MutiLangUtils.getLang("common.copy.success.param", "【${functionNameSimple}】") + " （共批量复制 " + ${className}.getCbRowDataIds().size() + " 条数据）");
		return URL_ADMIN_REPAGE;
	}
		</#if>
	
		<#-- csv导入导出 -->
 		<#if ioArtifact?? && ioArtifact == "orangesignal-csv">
	/**
	 * 导出CSV数据
	 * @param ${className}
	 * @param request
	 * @param response
	 * @param redirectAttributes
	 * @return
	 */
	@RequiresPermissions(PERMISSION_IO)
	@RequestMapping(value = "export/csv", method = RequestMethod.POST)
	public String exportCsvFile(${ClassName} ${className}, HttpServletRequest request,
			HttpServletResponse response, RedirectAttributes redirectAttributes) {
		try {
			String fileName = "【${functionNameSimple}】" + DateUtils.getDateTimeTight() + ".csv";
			List<${ClassName}> lst = ${className}Service.findList(${className});
			CsvEntityManager cet = new CsvEntityManager(new CsvConfig(
					CsvConfig.DEFAULT_SEPARATOR));
			CsvSaver csvSaver = null;
			response.reset();
			response.setContentType("application/octet-stream; charset=utf-8");
			response.setHeader("Content-Disposition", "attachment; filename="
					+ Encodes.urlEncode(fileName));
			csvSaver = cet.save(lst, ${ClassName}.class);
			csvSaver.to(response.getOutputStream());
			return null;
		} catch (Exception e) {
			addMessage(redirectAttributes, "导出${functionNameSimple}失败！失败信息：" + e.getMessage());
		}
		return URL_ADMIN_REPAGE;
	}

	/**
	 * 导入CSV数据
	 * 
	 * @param file
	 * @param redirectAttributes
	 * @return
	 */
	@RequiresPermissions(PERMISSION_IO)
	@RequestMapping(value = "import/csv", method = RequestMethod.POST)
	public String importCsvFile(MultipartFile file,
			RedirectAttributes redirectAttributes) throws Exception {
		if (Global.isDemoMode()) {
			addMessage(redirectAttributes, "演示模式，不允许操作！");
			return "redirect:" + Global.getAdminPath()
					+ "/${viewPrefix}/?repage";
		}
		try {
			int successNum = 0;
			int failureNum = 0;
			StringBuilder failureMsg = new StringBuilder();
			if (StringUtils.isBlank(file.getOriginalFilename())) {
				throw new RuntimeException("导入文档为空!");
			} else if (!file.getOriginalFilename().toLowerCase()
					.endsWith("csv")) {
				throw new RuntimeException("文档格式不正确!");
			} else {
				List<${ClassName}> list = new CsvEntityManager().load(
						${ClassName}.class).from(file.getInputStream());
				long i = 0;
				for (${ClassName} ${className} : list) {

					try {
						BeanValidators.validateWithException(validator, ${className});
						${className}Service.save(${className});
						successNum++;
						++i;
					} catch (ConstraintViolationException ex) {
						failureMsg.append("<br/>CSV数据第" + i + "行导入失败：");
						List<String> messageList = BeanValidators
								.extractPropertyAndMessageAsList(ex, ": ");
						for (String message : messageList) {
							failureMsg.append(message + "; ");
							failureNum++;
						}
					} catch (Exception ex) {
						failureMsg.append("<br/>导入CSV数据失败：" + ex.getMessage());
					}
				}
				if (failureNum > 0) {
					failureMsg.insert(0, "，失败 " + failureNum + " 条数据，导入信息如下：");
				}
				addMessage(redirectAttributes, "已成功导入 " + successNum
						+ " 条CSV数据" + failureMsg);
			}
		} catch (Exception e) {
			addMessage(redirectAttributes, "导入CSV数据失败！失败信息：" + e.getMessage());
		}
		return URL_ADMIN_REPAGE;
	}

	/**
	 * 下载导入CSV数据的模板
	 * 
	 * @param response
	 * @param redirectAttributes
	 * @return
	 */
	@RequiresPermissions(PERMISSION_IO)
	@RequestMapping(value = "import/csv/template")
	public String importCsvFileTemplate(HttpServletResponse response,
			RedirectAttributes redirectAttributes) {
		try {
			String fileName = "【${functionNameSimple}】数据导入模板.csv";

			List<${ClassName}> list = new ArrayList();
			${ClassName} ${className} = new ${ClassName}();
			//${className} = ${className}.getSinglePoJoByDefaultValue();
			list.add(${className});

			CsvEntityManager cet = new CsvEntityManager();
			response.reset();
			response.setContentType("application/octet-stream; charset=utf-8");
			response.setHeader("Content-Disposition", "attachment; filename="
					+ Encodes.urlEncode(fileName));
			cet.save(list, ${ClassName}.class).to(response.getOutputStream());
			return null;

		} catch (Exception e) {
			addMessage(redirectAttributes, "导入模板下载失败！失败信息：" + e.getMessage());
		}
		return URL_ADMIN_REPAGE;
	}
	</#if>
	
	<#-- excel导入导出 -->
	<#if ioArtifact?? && ioArtifact == "poi">
	/**
	 * 导出Excel数据
	 * @param ${className}
	 * @param request
	 * @param response
	 * @param redirectAttributes
	 * @return
	 */
	@RequiresPermissions(PERMISSION_IO)
	@RequestMapping(value = "export/excel", method = RequestMethod.POST)
	public String exportExcelFile(${ClassName} ${className}, HttpServletRequest request,
			HttpServletResponse response, RedirectAttributes redirectAttributes) {
		try {
			String fileName = "【${functionNameSimple}】" + DateUtils.getDateTimeTight() + ".xlsx";
			List<${ClassName}> lst = ${className}Service.findList(${className});
			new ExportExcel("${functionNameSimple}", ${ClassName}.class).setDataList(lst).write(response, fileName).dispose();
    		return null;
		} catch (Exception e) {
			addMessage(redirectAttributes, "导出${functionNameSimple}失败！失败信息：" + e.getMessage());
		}
		return URL_ADMIN_REPAGE;
	}

	/**
	 * 导入Excel数据
	 * 
	 * @param file
	 * @param redirectAttributes
	 * @return
	 */
	@RequiresPermissions(PERMISSION_IO)
	@RequestMapping(value = "import/excel", method = RequestMethod.POST)
	public String importExcelFile(MultipartFile file,
			RedirectAttributes redirectAttributes) throws Exception {
		if (Global.isDemoMode()) {
			addMessage(redirectAttributes, "演示模式，不允许操作！");
			return "redirect:" + Global.getAdminPath()
					+ "/${viewPrefix}/?repage";
		}
		try {
			int successNum = 0;
			int failureNum = 0;
			StringBuilder failureMsg = new StringBuilder();
			if (StringUtils.isBlank(file.getOriginalFilename())) {
				throw new RuntimeException("导入文档为空!");
			} else if (!file.getOriginalFilename().toLowerCase()
					.endsWith("xlsx")) {
				throw new RuntimeException("文档格式不正确!");
			} else {
				ImportExcel ei = new ImportExcel(file, 1, 0);
				List<${ClassName}> list = ei.getDataList(${ClassName}.class);
				long i = 0;
				for (${ClassName} ${className} : list) {

					try {
						BeanValidators.validateWithException(validator, ${className});
						${className}Service.save(${className});
						successNum++;
						++i;
					} catch (ConstraintViolationException ex) {
						failureMsg.append("<br/>Excel数据第" + i + "行导入失败：");
						List<String> messageList = BeanValidators
								.extractPropertyAndMessageAsList(ex, ": ");
						for (String message : messageList) {
							failureMsg.append(message + "; ");
							failureNum++;
						}
					} catch (Exception ex) {
						failureMsg.append("<br/>导入Excel数据失败：" + ex.getMessage());
					}
				}
				if (failureNum > 0) {
					failureMsg.insert(0, "，失败 " + failureNum + " 条数据，导入信息如下：");
				}
				addMessage(redirectAttributes, "已成功导入 " + successNum
						+ " 条Excel数据" + failureMsg);
			}
		} catch (Exception e) {
			addMessage(redirectAttributes, "导入Excel数据失败！失败信息：" + e.getMessage());
		}
		return URL_ADMIN_REPAGE;
	}

	/**
	 * 下载导入Excel数据的模板
	 * 
	 * @param response
	 * @param redirectAttributes
	 * @return
	 */
	@RequiresPermissions(PERMISSION_IO)
	@RequestMapping(value = "import/excel/template")
	public String importExcelFileTemplate(HttpServletResponse response,
			RedirectAttributes redirectAttributes) {
		try {
			String fileName = "【${functionNameSimple}】数据导入模板.xlsx";

			List<${ClassName}> list = new ArrayList();
			${ClassName} ${className} = new ${ClassName}();
			//${className} = ${className}.getSinglePoJoByDefaultValue();
			list.add(${className});

			new ExportExcel("${functionNameSimple}", ${ClassName}.class, 2).setDataList(list).write(response, fileName).dispose();
			return null;

		} catch (Exception e) {
			addMessage(redirectAttributes, "导入模板下载失败！失败信息：" + e.getMessage());
		}
		return URL_ADMIN_REPAGE;
	}
		</#if>
}]]>
	</content>
</template>